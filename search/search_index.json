{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HOME | INSTALLATION | CONFIGURATION | TOKEN | FAQ HACS (Home Assistant Community Store) What can HACS do? This is a manager for your custom integration (components) and plugin (lovelace elements) needs. It can help you download and update elements. It can also help you discover new awesome stuff. Updates Installed elements HACS will check for updates to installed elements: At startup. Every 30 minutes after HA startup. Everything else HACS will check for updates to every element: At startup Every 500 minutes after HA startup. Manually trigger updates You can also force a check by clicking the \"RELOAD DATA\" button under the \"SETTINGS\" tab (This will force a reload of everything.) Under the \"SETTINGS\" tab there is also a reload icon to the left of every custom repository you have added, clicking that will reload info for it. On each RepositoryView (the page with details about the element) there is a reload icon at the top-right corner, clicking that will reload it. Logs Like any other integration this logs to the home-assistant.log file. You can also click the \"OPEN LOG\" from the \"SETTINGS\" tab to show logs only related to this integration (useful when creating a issue) Startup During the startup it will scan for know repositories, and there will be a progressbar indicating that it's working. This is completely normal, and you can still use it while it's working. The same indication will show when a scheduled task is running. Existing elements This will not scan you local file system for existing elements. Why? Trust. If this did not download it, there'd be no way to know which version you have, so for elements you already have you will still need to click the \"INSTALL\" button for that element. Data All data it handles are saved to the hacs file that is located under .storage Sensor During the setup HACS will add a new sensor to your installation ( sensor.hacs ). This will have the number of pending updates as the state. Settings This section is for the settings tab. Add custom repos By default all elements that meet the requirements from these orgs are automatically added: custom-components custom-cards Developers can also add their repositories to be included by default But you can add any other repository that meets the requirements, to do so go to the \"SETTINGS\" tab. Add the url to the repository under \"CUSTOM REPOSITORIES\" and select a type before clicking the \"save icon\". After adding a repository the repository will be scanned, if it can be tracked the element will show up under \"STORE\", and you will be redirected to that element. Want to get inspiration on what to add? Check out the Awesome Home Assistant list it contains links to many custom_components (integrations) and custom_cards (plugins). If you have added a repository manually and that repository is subsequently added to the 'store' then that will be removed from the custom repository list. Note for developers For your repository to be added there are a few criteria that need to be met. See here for how to add a custom repository. The description of each element is gathered from it's repository. The version it shows/uses is gathered from the tag name of the latest release. If you want to add a richer experience for your users you can add an info.md file to the root of your repository (this is optional), this file will be rendered under the repository description, it does not support the full styling options as Github so use with care. Include default repositories As a developer you can now add your repository to be included in as a default repository in the store. Before you try to add your repository to the default store first make sure that it follows the requirements for that type that are listed below. Only the owner of the repository or a major contributor to it can submit a PR to have it included as a default. When all of this is covered, you can add it to DEFAULT_REPOSITORIES at the bottom of the const.py file When a PR for this is merged, it will be a part of the next planned minor release (0.X.0), if no release is planed a release will be created about a week after the first addition. Examples: integration plugin Note for integration developers For an integration repository to be valid these are the criteria: The repository uses GitHub releases (Optional) If there are releases: When installing/upgrading it will scan the content in the latest release. If there are no releases: It will scan files in the branch marked as default. There is only one integration (one directory under ROOT_OF_THE_REPO/custom_components/ ) pr. repository (if you have more, only the first one will be managed.) The integration (all the python files for it) are located under ROOT_OF_THE_REPO/custom_components/INTEGRATION_NAME/ There is only one integration (one directory under ROOT_OF_THE_REPO/custom_components/ ) per repository (if you have more, only the first one will be managed.) The integration and all the python files for it are located under ROOT_OF_THE_REPO/custom_components/INTEGRATION_NAME/ In that integration directory, there is a manifest.json file. A good template to use as a reference is blueprint Note for plugin developers For an integration repository to be valid these are the criteria: The repository uses GitHub releases (Optional) If there are releases: When installing/upgrading it will scan the content in the latest release. If there are no releases: It will scan files in the branch marked as default. There are .js files under ROOT_OF_THE_REPO/dist/ or directly in the root of the repository. One of the .js files have the same name as the repository. With every rule there is an exception, if the repository's name starts with \"lovelace-\" , there can be a .js file in the repository matching the repository name with \"lovelace-\" striped from the name, example: Accepted: repository name: \"lovelace-awesome-card\" file name of one of the files \"awesome-card.js\" It will first check the dist directory, if nothing is there it will check the root directory. All .js files it finds will be downloaded. A good template to use as a reference is boilerplate-card Contribute This integration is massive and there are a lot of areas to contribute to. Contributions to the docs, will almost be blindly accepted. For contributions to the integration itself (backend/frontend) If the contribution is minor, make the change and open a PR (Pull Request). For new features, changes to existing features, or other big changes, please open an RFC (Request for comment) issue before you start the work. Image \"gallery\" Overview Store Settings Example integration Example plugin Last notes from the initial developer First startup after installation will take some time, but it's worth it. This was developed under the influence of \ud83c\udf7a, a lot of \ud83c\udf7a, if you want to support my work feel free to buy me a \u2615\ufe0f (most likely \ud83c\udf7a) How it works and what it does are added based on a single persons mindset, you may not agree with what I have done, if you have a suggestion please open an RFC . Why do frontend like this and not use JavaScript in a panel_custom ? I tried, believe me I tried. I really wanted to go that route, but after many, many hours of failing I gave up. Bugs / issues / suggestions If you find bugs/issues or have any suggestions please open an issue in the HACS Repository","title":"Home"},{"location":"#hacs-home-assistant-community-store","text":"","title":"HACS (Home Assistant Community Store)"},{"location":"#what-can-hacs-do","text":"This is a manager for your custom integration (components) and plugin (lovelace elements) needs. It can help you download and update elements. It can also help you discover new awesome stuff.","title":"What can HACS do?"},{"location":"#updates","text":"","title":"Updates"},{"location":"#installed-elements","text":"HACS will check for updates to installed elements: At startup. Every 30 minutes after HA startup.","title":"Installed elements"},{"location":"#everything-else","text":"HACS will check for updates to every element: At startup Every 500 minutes after HA startup.","title":"Everything else"},{"location":"#manually-trigger-updates","text":"You can also force a check by clicking the \"RELOAD DATA\" button under the \"SETTINGS\" tab (This will force a reload of everything.) Under the \"SETTINGS\" tab there is also a reload icon to the left of every custom repository you have added, clicking that will reload info for it. On each RepositoryView (the page with details about the element) there is a reload icon at the top-right corner, clicking that will reload it.","title":"Manually trigger updates"},{"location":"#logs","text":"Like any other integration this logs to the home-assistant.log file. You can also click the \"OPEN LOG\" from the \"SETTINGS\" tab to show logs only related to this integration (useful when creating a issue)","title":"Logs"},{"location":"#startup","text":"During the startup it will scan for know repositories, and there will be a progressbar indicating that it's working. This is completely normal, and you can still use it while it's working. The same indication will show when a scheduled task is running.","title":"Startup"},{"location":"#existing-elements","text":"This will not scan you local file system for existing elements. Why? Trust. If this did not download it, there'd be no way to know which version you have, so for elements you already have you will still need to click the \"INSTALL\" button for that element.","title":"Existing elements"},{"location":"#data","text":"All data it handles are saved to the hacs file that is located under .storage","title":"Data"},{"location":"#sensor","text":"During the setup HACS will add a new sensor to your installation ( sensor.hacs ). This will have the number of pending updates as the state.","title":"Sensor"},{"location":"#settings","text":"This section is for the settings tab.","title":"Settings"},{"location":"#add-custom-repos","text":"By default all elements that meet the requirements from these orgs are automatically added: custom-components custom-cards Developers can also add their repositories to be included by default But you can add any other repository that meets the requirements, to do so go to the \"SETTINGS\" tab. Add the url to the repository under \"CUSTOM REPOSITORIES\" and select a type before clicking the \"save icon\". After adding a repository the repository will be scanned, if it can be tracked the element will show up under \"STORE\", and you will be redirected to that element. Want to get inspiration on what to add? Check out the Awesome Home Assistant list it contains links to many custom_components (integrations) and custom_cards (plugins). If you have added a repository manually and that repository is subsequently added to the 'store' then that will be removed from the custom repository list.","title":"Add custom repos"},{"location":"#note-for-developers","text":"For your repository to be added there are a few criteria that need to be met. See here for how to add a custom repository. The description of each element is gathered from it's repository. The version it shows/uses is gathered from the tag name of the latest release. If you want to add a richer experience for your users you can add an info.md file to the root of your repository (this is optional), this file will be rendered under the repository description, it does not support the full styling options as Github so use with care.","title":"Note for developers"},{"location":"#include-default-repositories","text":"As a developer you can now add your repository to be included in as a default repository in the store. Before you try to add your repository to the default store first make sure that it follows the requirements for that type that are listed below. Only the owner of the repository or a major contributor to it can submit a PR to have it included as a default. When all of this is covered, you can add it to DEFAULT_REPOSITORIES at the bottom of the const.py file When a PR for this is merged, it will be a part of the next planned minor release (0.X.0), if no release is planed a release will be created about a week after the first addition. Examples: integration plugin","title":"Include default repositories"},{"location":"#note-for-integration-developers","text":"For an integration repository to be valid these are the criteria: The repository uses GitHub releases (Optional) If there are releases: When installing/upgrading it will scan the content in the latest release. If there are no releases: It will scan files in the branch marked as default. There is only one integration (one directory under ROOT_OF_THE_REPO/custom_components/ ) pr. repository (if you have more, only the first one will be managed.) The integration (all the python files for it) are located under ROOT_OF_THE_REPO/custom_components/INTEGRATION_NAME/ There is only one integration (one directory under ROOT_OF_THE_REPO/custom_components/ ) per repository (if you have more, only the first one will be managed.) The integration and all the python files for it are located under ROOT_OF_THE_REPO/custom_components/INTEGRATION_NAME/ In that integration directory, there is a manifest.json file. A good template to use as a reference is blueprint","title":"Note for integration developers"},{"location":"#note-for-plugin-developers","text":"For an integration repository to be valid these are the criteria: The repository uses GitHub releases (Optional) If there are releases: When installing/upgrading it will scan the content in the latest release. If there are no releases: It will scan files in the branch marked as default. There are .js files under ROOT_OF_THE_REPO/dist/ or directly in the root of the repository. One of the .js files have the same name as the repository. With every rule there is an exception, if the repository's name starts with \"lovelace-\" , there can be a .js file in the repository matching the repository name with \"lovelace-\" striped from the name, example: Accepted: repository name: \"lovelace-awesome-card\" file name of one of the files \"awesome-card.js\" It will first check the dist directory, if nothing is there it will check the root directory. All .js files it finds will be downloaded. A good template to use as a reference is boilerplate-card","title":"Note for plugin developers"},{"location":"#contribute","text":"This integration is massive and there are a lot of areas to contribute to. Contributions to the docs, will almost be blindly accepted.","title":"Contribute"},{"location":"#for-contributions-to-the-integration-itself-backendfrontend","text":"If the contribution is minor, make the change and open a PR (Pull Request). For new features, changes to existing features, or other big changes, please open an RFC (Request for comment) issue before you start the work.","title":"For contributions to the integration itself (backend/frontend)"},{"location":"#image-gallery","text":"","title":"Image \"gallery\""},{"location":"#overview","text":"","title":"Overview"},{"location":"#store","text":"","title":"Store"},{"location":"#settings_1","text":"","title":"Settings"},{"location":"#example-integration","text":"","title":"Example integration"},{"location":"#example-plugin","text":"","title":"Example plugin"},{"location":"#last-notes-from-the-initial-developer","text":"First startup after installation will take some time, but it's worth it. This was developed under the influence of \ud83c\udf7a, a lot of \ud83c\udf7a, if you want to support my work feel free to buy me a \u2615\ufe0f (most likely \ud83c\udf7a) How it works and what it does are added based on a single persons mindset, you may not agree with what I have done, if you have a suggestion please open an RFC .","title":"Last notes from the initial developer"},{"location":"#why-do-frontend-like-this-and-not-use-javascript-in-a-panel_custom","text":"I tried, believe me I tried. I really wanted to go that route, but after many, many hours of failing I gave up.","title":"Why do frontend like this and not use JavaScript in a panel_custom?"},{"location":"#bugs-issues-suggestions","text":"If you find bugs/issues or have any suggestions please open an issue in the HACS Repository","title":"Bugs / issues / suggestions"},{"location":"configure/","text":"HOME | INSTALLATION | CONFIGURATION | TOKEN | FAQ Configuration Configuration for this is quite simple. Only two lines are needed/supported. hacs: token: !secret my_github_access_token NB! This needs to be in configuration.yaml , not in a \"package\". To generate a GitHub Personal Access Token that you can use have a look here.","title":"Configure"},{"location":"configure/#configuration","text":"Configuration for this is quite simple. Only two lines are needed/supported. hacs: token: !secret my_github_access_token NB! This needs to be in configuration.yaml , not in a \"package\". To generate a GitHub Personal Access Token that you can use have a look here.","title":"Configuration"},{"location":"developer/","text":"","title":"Developer?"},{"location":"faq/","text":"HOME | INSTALLATION | CONFIGURATION | TOKEN | FAQ What is HACS? HACS is an abbreviation of \"Home Assistant Community Store\". Although \"Store\" is not \"technically\" correct, since nothing is sold, it's more like a marketplace? but \"HACM\" didn't have the same ring to it. Higlighs of what HACS can do: Help you discover new integrations and plugins. Help you install (download) new integrations and plugins. Help you keep track of your integrations and plugins. Is this for hass.io only? No, it's not. You can use this on any Home Assistant installation. Windows might have issues, but if you are running HA on Windows you are probably used to that. How does it work: Installation When you install an element this is what's happening: The local target directory(folder) is deleted. A new local target directory is created. All expected files are downloaded to that directory. The files it downloads depends on the type. Files downloaded for integrations : Everything under the first directory in custom_components Files downloaded for plugins : Every .js file in the source directory, this can be on the release page, the dist directory, or the root of the repository. When a .js file is downloaded, a compressed .gz version of if will be created, this file (if it exist) will be served to the requester to save transfer size/time. If you make local changes to a plugin in the .js file, delete the .gz variant to have HACS serve up that one. How does it work: Upgrade The same as installation. How can I install this. Look at the installation documentation.","title":"FAQ"},{"location":"faq/#what-is-hacs","text":"HACS is an abbreviation of \"Home Assistant Community Store\". Although \"Store\" is not \"technically\" correct, since nothing is sold, it's more like a marketplace? but \"HACM\" didn't have the same ring to it. Higlighs of what HACS can do: Help you discover new integrations and plugins. Help you install (download) new integrations and plugins. Help you keep track of your integrations and plugins.","title":"What is HACS?"},{"location":"faq/#is-this-for-hassio-only","text":"No, it's not. You can use this on any Home Assistant installation. Windows might have issues, but if you are running HA on Windows you are probably used to that.","title":"Is this for hass.io only?"},{"location":"faq/#how-does-it-work-installation","text":"When you install an element this is what's happening: The local target directory(folder) is deleted. A new local target directory is created. All expected files are downloaded to that directory. The files it downloads depends on the type. Files downloaded for integrations : Everything under the first directory in custom_components Files downloaded for plugins : Every .js file in the source directory, this can be on the release page, the dist directory, or the root of the repository. When a .js file is downloaded, a compressed .gz version of if will be created, this file (if it exist) will be served to the requester to save transfer size/time. If you make local changes to a plugin in the .js file, delete the .gz variant to have HACS serve up that one.","title":"How does it work: Installation"},{"location":"faq/#how-does-it-work-upgrade","text":"The same as installation.","title":"How does it work: Upgrade"},{"location":"faq/#how-can-i-install-this","text":"Look at the installation documentation.","title":"How can I install this."},{"location":"install/","text":"HOME | INSTALLATION | CONFIGURATION | TOKEN | FAQ Installation NB!: You need to use Home Assistant version 0.92.0 or newer for this to work. NB!: If you move from custom_updater to this see the special note at the bottom here. This integration requires a lot of files. The easiest way to make sure that you have them all is to download the .zip file from the repository. If you want to download using a terminal, see instructions at the bottom of this page. Step 1 - Open browser You are probably looking at this in a browser, so we can probably check this off. Step 2 - Go to the HACS repository Then find the latest release from the release page. Shortcut: https://github.com/custom-components/hacs/releases/latest Step 3 - Initialize Download Initialize the download by clicking on the \" Source code (zip)\" link at the bottom of the page. Step 4 - Extract the content There should now be a hacs-VERSION_NUMBER.zip (like hacs-0.2.0.zip ) file in your Download folder. You need to unzip this, before proceeding. Step 5 - Move along Now that you have extracted all the files you will see something like this: In the custom_components named, there is a folder named hacs . The folder named hacs would need to be copied to your Home Assistant installation. For this use your favorite tool to get stuff to Home Assistant. If this is your first custom_component you would need to create a new folder (see step 6). If this is not your first, you should know where to place the hacs folder, and if this is not your first why are you reading this? you have done this earlier and should know this by now :D Anyway the hacs folder needs to be placed under <config_dir>/custom_components/ On Hassio the final location will be /config/custom_components/hacs On Hassbian the final location will be /home/homeassistant/.homeassistant/custom_components/hacs Step 6 - (Bonus) If you are a seasoned user, skip to step 7. Cool you are still reading. Open the folder where you have your configuration.yaml file. Don't open that file (yet) just the folder for now. If you see a folder named custom_components there, go back to Step 5 if you think you need to do something here. If you do not see a custom_components folder in the same folder as configuration.yaml , you need to create it. The custom_components needs to be in the exact same folder as configuration.yaml Step 7 - \u270f\ufe0f You should now be done, next part will be to add it to your configuration. Moving from custom_updater If you have custom_updater installed you need to remove that (rename the directory or delete it completely). You will also need to remove the custom_updater entry from your configuration.yaml file. HACS and custom_updater can not operate on the same installation. If you used the special endpoint /customcards/ endpoint for your Lovelace cards, you now need to reinstall that plugin using HACS and use the url provided in the page for that plugin in the HACS UI, if the plugin is not there you need to use /local/ instead. As noted under 'Existing elements' You need to click the \"INSTALL\" button for each element you previously have installed. Installation using the terminal To download via terminal, make sure you have git installed. Next, Navigate to your custom_components directory: cd /config/custom_components # This location is different from installation to installation (see step 5). Then run the following commands: git clone https://github.com/custom-components/hacs.git hacs_temp cd hacs_temp git checkout $(git describe --tags 'git rev-list --tags --max-count=1') cd ../ cp -r hacs_temp/custom_components/hacs hacs rm -R hacs_temp When this is done, see step 7.","title":"Install"},{"location":"install/#installation","text":"NB!: You need to use Home Assistant version 0.92.0 or newer for this to work. NB!: If you move from custom_updater to this see the special note at the bottom here. This integration requires a lot of files. The easiest way to make sure that you have them all is to download the .zip file from the repository. If you want to download using a terminal, see instructions at the bottom of this page.","title":"Installation"},{"location":"install/#step-1-open-browser","text":"You are probably looking at this in a browser, so we can probably check this off.","title":"Step 1 - Open browser"},{"location":"install/#step-2-go-to-the-hacs-repository","text":"Then find the latest release from the release page. Shortcut: https://github.com/custom-components/hacs/releases/latest","title":"Step 2 - Go to the HACS repository"},{"location":"install/#step-3-initialize-download","text":"Initialize the download by clicking on the \" Source code (zip)\" link at the bottom of the page.","title":"Step 3 - Initialize Download"},{"location":"install/#step-4-extract-the-content","text":"There should now be a hacs-VERSION_NUMBER.zip (like hacs-0.2.0.zip ) file in your Download folder. You need to unzip this, before proceeding.","title":"Step 4 - Extract the content"},{"location":"install/#step-5-move-along","text":"Now that you have extracted all the files you will see something like this: In the custom_components named, there is a folder named hacs . The folder named hacs would need to be copied to your Home Assistant installation. For this use your favorite tool to get stuff to Home Assistant. If this is your first custom_component you would need to create a new folder (see step 6). If this is not your first, you should know where to place the hacs folder, and if this is not your first why are you reading this? you have done this earlier and should know this by now :D Anyway the hacs folder needs to be placed under <config_dir>/custom_components/ On Hassio the final location will be /config/custom_components/hacs On Hassbian the final location will be /home/homeassistant/.homeassistant/custom_components/hacs","title":"Step 5 - Move along"},{"location":"install/#step-6-bonus","text":"If you are a seasoned user, skip to step 7. Cool you are still reading. Open the folder where you have your configuration.yaml file. Don't open that file (yet) just the folder for now. If you see a folder named custom_components there, go back to Step 5 if you think you need to do something here. If you do not see a custom_components folder in the same folder as configuration.yaml , you need to create it. The custom_components needs to be in the exact same folder as configuration.yaml","title":"Step 6 - (Bonus)"},{"location":"install/#step-7-","text":"You should now be done, next part will be to add it to your configuration.","title":"Step 7 - \u270f\ufe0f"},{"location":"install/#moving-from-custom_updater","text":"If you have custom_updater installed you need to remove that (rename the directory or delete it completely). You will also need to remove the custom_updater entry from your configuration.yaml file. HACS and custom_updater can not operate on the same installation. If you used the special endpoint /customcards/ endpoint for your Lovelace cards, you now need to reinstall that plugin using HACS and use the url provided in the page for that plugin in the HACS UI, if the plugin is not there you need to use /local/ instead. As noted under 'Existing elements' You need to click the \"INSTALL\" button for each element you previously have installed.","title":"Moving from custom_updater"},{"location":"install/#installation-using-the-terminal","text":"To download via terminal, make sure you have git installed. Next, Navigate to your custom_components directory: cd /config/custom_components # This location is different from installation to installation (see step 5). Then run the following commands: git clone https://github.com/custom-components/hacs.git hacs_temp cd hacs_temp git checkout $(git describe --tags 'git rev-list --tags --max-count=1') cd ../ cp -r hacs_temp/custom_components/hacs hacs rm -R hacs_temp When this is done, see step 7.","title":"Installation using the terminal"},{"location":"token/","text":"HOME | INSTALLATION | CONFIGURATION | TOKEN | FAQ Github Personal Access Token You need to generate an Access Token to your account before you start using this. Step 1 - Open browser You are probably looking at this in a browser, so we can probably check this off. Step 2 - Go to your GitHub \"Developer settings\" And then \"Personal access tokens.\" or click here: https://github.com/settings/tokens Step 3 - Start generation Click the \"Generate new token\" button. If you are asked to login, do so. Step 4 - Choices First give it a logical name so that you can recognise it. Then click the \"Generate token\" button at the bottom. You do not need to check any of the boxes. Step 5 - Copy Now you see the generated token, this will be the only time you see it, make sure that you copy it manually or by clicking the clipboard icon.","title":"Token"},{"location":"token/#github-personal-access-token","text":"You need to generate an Access Token to your account before you start using this.","title":"Github Personal Access Token"},{"location":"token/#step-1-open-browser","text":"You are probably looking at this in a browser, so we can probably check this off.","title":"Step 1 - Open browser"},{"location":"token/#step-2-go-to-your-github-developer-settings","text":"And then \"Personal access tokens.\" or click here: https://github.com/settings/tokens","title":"Step 2 - Go to your GitHub \"Developer settings\""},{"location":"token/#step-3-start-generation","text":"Click the \"Generate new token\" button. If you are asked to login, do so.","title":"Step 3 - Start generation"},{"location":"token/#step-4-choices","text":"First give it a logical name so that you can recognise it. Then click the \"Generate token\" button at the bottom. You do not need to check any of the boxes.","title":"Step 4 - Choices"},{"location":"token/#step-5-copy","text":"Now you see the generated token, this will be the only time you see it, make sure that you copy it manually or by clicking the clipboard icon.","title":"Step 5 - Copy"}]}